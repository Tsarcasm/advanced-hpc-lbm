icc -std=c99 -Wall -Ofast -mtune=native -march=native -fma -xHOST -qopenmp -qopt-report=5 -qopt-report-file=stdout -restrict -align d2q9-bgk.c -lm -o d2q9-bgk
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -std=c99 -Wall -Ofast -mtune=native -march=native -fma -xHOST -qopenmp -qopt-report=5 -qopt-report-file=stdout -restrict -align -lm -o d2q9-bgk

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/15=6.7%] d2q9-bgk.c(190,1)
  -> INLINE: (205,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (840,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (841,3) exit(int)
  -> EXTERN: (214,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (217,3) initialise(const char *, const char *, t_param *, t_speed_soa **, t_speed_soa **, t_speed_soa **, int **, float **) (isz = 1120) (sz = 1141)
     [[ Inlining would exceed -inline-max-size value (1141>253) <1>]]
  -> EXTERN: (235,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (241,19) timestep(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__) (isz = 443) (sz = 458)
     [[ Inlining would exceed -inline-max-size value (458>253) <1>]]
  -> EXTERN: (257,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (264,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (269,3) printf(const char *__restrict__, ...)
  -> EXTERN: (270,3) printf(const char *__restrict__, ...)
  -> INLINE: (270,41) calc_reynolds(const t_param, t_speed_soa *, int *) (isz = 165) (sz = 176)
    -> INLINE: (724,10) av_velocity(const t_param, t_speed_soa *, int *) (isz = 155) (sz = 166)
  -> EXTERN: (271,3) printf(const char *__restrict__, ...)
  -> EXTERN: (272,3) printf(const char *__restrict__, ...)
  -> EXTERN: (273,3) printf(const char *__restrict__, ...)
  -> EXTERN: (274,3) printf(const char *__restrict__, ...)
  -> (275,3) write_values(const t_param, t_speed_soa *, int *, float *) (isz = 265) (sz = 278)
     [[ Inlining would exceed -inline-max-size value (278>253) <1>]]
  -> INLINE: (276,3) finalise(const t_param *, t_speed_soa **, t_speed_soa **, t_speed_soa **, int **, float **) (isz = 99) (sz = 116)
    -> INLINE: (701,3) free_t_speed_soa(t_speed_soa *) (isz = 27) (sz = 32)
      -> EXTERN: (124,3) _mm_free(void *)
      -> EXTERN: (125,3) _mm_free(void *)
      -> EXTERN: (126,3) _mm_free(void *)
      -> EXTERN: (127,3) _mm_free(void *)
      -> EXTERN: (128,3) _mm_free(void *)
      -> EXTERN: (129,3) _mm_free(void *)
      -> EXTERN: (130,3) _mm_free(void *)
      -> EXTERN: (131,3) _mm_free(void *)
      -> EXTERN: (132,3) _mm_free(void *)
      -> EXTERN: (133,3) _mm_free(void *)
    -> INLINE: (704,3) free_t_speed_soa(t_speed_soa *) (isz = 27) (sz = 32)
      -> EXTERN: (124,3) _mm_free(void *)
      -> EXTERN: (125,3) _mm_free(void *)
      -> EXTERN: (126,3) _mm_free(void *)
      -> EXTERN: (127,3) _mm_free(void *)
      -> EXTERN: (128,3) _mm_free(void *)
      -> EXTERN: (129,3) _mm_free(void *)
      -> EXTERN: (130,3) _mm_free(void *)
      -> EXTERN: (131,3) _mm_free(void *)
      -> EXTERN: (132,3) _mm_free(void *)
      -> EXTERN: (133,3) _mm_free(void *)
    -> INLINE: (707,3) free_t_speed_soa(t_speed_soa *) (isz = 27) (sz = 32)
      -> EXTERN: (124,3) _mm_free(void *)
      -> EXTERN: (125,3) _mm_free(void *)
      -> EXTERN: (126,3) _mm_free(void *)
      -> EXTERN: (127,3) _mm_free(void *)
      -> EXTERN: (128,3) _mm_free(void *)
      -> EXTERN: (129,3) _mm_free(void *)
      -> EXTERN: (130,3) _mm_free(void *)
      -> EXTERN: (131,3) _mm_free(void *)
      -> EXTERN: (132,3) _mm_free(void *)
      -> EXTERN: (133,3) _mm_free(void *)
    -> EXTERN: (710,3) _mm_free(void *)
    -> EXTERN: (713,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(220,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(222,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(222,5)
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 6.520 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(222,5)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.923
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(222,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(239,3)
   remark #15382: vectorization support: call to function timestep(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__) cannot be vectorized   [ d2q9-bgk.c(241,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at d2q9-bgk.c(490,3) inlined into d2q9-bgk.c(270,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(492,5) inlined into d2q9-bgk.c(270,41)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(492,5) inlined into d2q9-bgk.c(270,41)
      remark #15389: vectorization support: reference start_cells->v0[idx] has unaligned access   [ d2q9-bgk.c(499,31) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(500,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(501,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(502,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(503,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(504,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(505,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(506,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(507,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(510,22) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(511,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(512,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(513,26) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(514,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(515,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(518,22) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(519,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(520,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(521,26) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(522,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(523,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.290 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(492,5) inlined into d2q9-bgk.c(270,41)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(241,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(270,41):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(275,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(190,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:190

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     471
            Global    :      82
            Local     :     389
        Regenerable   :      60
        Spilled       :      20
        
    Routine stack
        Variables     :     116 bytes*
            Reads     :      40 [4.93e+01 ~ 1.0%]
            Writes    :      17 [2.30e+01 ~ 0.5%]
        Spills        :     120 bytes*
            Reads     :      25 [6.14e+01 ~ 1.3%]
            Writes    :      21 [3.42e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__)) [2/15=13.3%] d2q9-bgk.c(282,1)
  -> INLINE: (292,3) accelerate_flow(const t_param, t_speed_soa *__restrict__, int *__restrict__) (isz = 138) (sz = 149)
  -> INLINE: (302,7) propagate(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int, int) (isz = 116) (sz = 131)
  -> (303,7) collision(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__, int, int) (isz = 538) (sz = 556)
     [[ Inlining would exceed -inline-max-size value (556>253) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(319,3) inlined into d2q9-bgk.c(292,3)
   remark #15388: vectorization support: reference start_cells->v1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(329,7) ]
   remark #15388: vectorization support: reference start_cells->v1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(329,7) ]
   remark #15388: vectorization support: reference start_cells->v5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(330,7) ]
   remark #15388: vectorization support: reference start_cells->v5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(330,7) ]
   remark #15388: vectorization support: reference start_cells->v8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(331,7) ]
   remark #15388: vectorization support: reference start_cells->v8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(331,7) ]
   remark #15388: vectorization support: reference start_cells->v3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(333,7) ]
   remark #15388: vectorization support: reference start_cells->v3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(333,7) ]
   remark #15388: vectorization support: reference start_cells->v6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(334,7) ]
   remark #15388: vectorization support: reference start_cells->v6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(334,7) ]
   remark #15388: vectorization support: reference start_cells->v7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(335,7) ]
   remark #15388: vectorization support: reference start_cells->v7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(335,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.120
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.090 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(297,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(300,5)
      remark #15389: vectorization support: reference start_cells->v1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(356,24) ]
      remark #15388: vectorization support: reference tmp_cells->v0[idx] has aligned access   [ d2q9-bgk.c(355,3) ]
      remark #15388: vectorization support: reference start_cells->v0[idx] has aligned access   [ d2q9-bgk.c(355,24) ]
      remark #15388: vectorization support: reference tmp_cells->v1[idx] has aligned access   [ d2q9-bgk.c(356,3) ]
      remark #15388: vectorization support: reference tmp_cells->v2[idx] has aligned access   [ d2q9-bgk.c(357,3) ]
      remark #15389: vectorization support: reference start_cells->v2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(357,24) ]
      remark #15388: vectorization support: reference tmp_cells->v3[idx] has aligned access   [ d2q9-bgk.c(358,3) ]
      remark #15388: vectorization support: reference tmp_cells->v4[idx] has aligned access   [ d2q9-bgk.c(359,3) ]
      remark #15389: vectorization support: reference start_cells->v4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(359,24) ]
      remark #15388: vectorization support: reference tmp_cells->v5[idx] has aligned access   [ d2q9-bgk.c(360,3) ]
      remark #15388: vectorization support: reference tmp_cells->v6[idx] has aligned access   [ d2q9-bgk.c(361,3) ]
      remark #15388: vectorization support: reference tmp_cells->v7[idx] has aligned access   [ d2q9-bgk.c(362,3) ]
      remark #15388: vectorization support: reference tmp_cells->v8[idx] has aligned access   [ d2q9-bgk.c(363,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <start_cells->v3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(358,24) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <start_cells->v5[x_w+y_s*params.nx]>, part of index is conditional   [ d2q9-bgk.c(360,24) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <start_cells->v6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(361,24) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <start_cells->v7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(362,24) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <start_cells->v8[x_w+y_n*params.nx]>, part of index is conditional   [ d2q9-bgk.c(363,24) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.025
      remark #15518: Structure assignment was serialized   [ d2q9-bgk.c(303,17) ]
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 9 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15456: masked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 5 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 237 
      remark #15477: vector cost: 147.000 
      remark #15478: estimated potential speedup: 1.590 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(303,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(282,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:282

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     324
            Global    :     115
            Local     :     209
        Regenerable   :      41
        Spilled       :      72
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     768 bytes*
            Reads     :     137 [1.28e+03 ~ 22.3%]
            Writes    :     107 [2.04e+02 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int *__restrict__, int, int)) [3/15=20.0%] d2q9-bgk.c(370,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(455,3)
   remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
   remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(455,42) ]
   remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(456,40) ]
   remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(456,47) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.091
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(370,1):remark #34051: REGISTER ALLOCATION : [collision] d2q9-bgk.c:370

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     158
            Global    :      11
            Local     :     147
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [1.50e+00 ~ 1.4%]
            Writes    :      14 [7.00e+00 ~ 6.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed_soa *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed_soa *, int *, float *)) [4/15=26.7%] d2q9-bgk.c(751,1)
  -> EXTERN: (760,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (764,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (807,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (811,3) fclose(FILE *)
  -> EXTERN: (813,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (817,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (822,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (825,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(767,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(807,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->v1 (781:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7) and cells->v1 (781:9)

   LOOP BEGIN at d2q9-bgk.c(769,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(807,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->v1 (781:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7) and cells->v1 (781:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(820,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(822,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(751,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:751

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     149
            Global    :      37
            Local     :     112
        Regenerable   :      48
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [6.08e+01 ~ 4.9%]
            Writes    :       6 [1.26e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: alloc_t_speed_soa(const int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (alloc_t_speed_soa(const int)) [5/15=33.3%] d2q9-bgk.c(100,1)
  -> EXTERN: (101,40) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (102,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (103,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (104,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (105,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (106,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (107,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (108,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (109,25) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (110,25) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (115,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(100,1):remark #34051: REGISTER ALLOCATION : [alloc_t_speed_soa] d2q9-bgk.c:100

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r13-r14]
        
    Routine temporaries
        Total         :      69
            Global    :      28
            Local     :      41
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: free_t_speed_soa(t_speed_soa *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (free_t_speed_soa(t_speed_soa *)) [6/15=40.0%] d2q9-bgk.c(123,1)
  -> EXTERN: (124,3) _mm_free(void *)
  -> EXTERN: (125,3) _mm_free(void *)
  -> EXTERN: (126,3) _mm_free(void *)
  -> EXTERN: (127,3) _mm_free(void *)
  -> EXTERN: (128,3) _mm_free(void *)
  -> EXTERN: (129,3) _mm_free(void *)
  -> EXTERN: (130,3) _mm_free(void *)
  -> EXTERN: (131,3) _mm_free(void *)
  -> EXTERN: (132,3) _mm_free(void *)
  -> EXTERN: (133,3) _mm_free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(123,1):remark #34051: REGISTER ALLOCATION : [free_t_speed_soa] d2q9-bgk.c:123

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r14]
        
    Routine temporaries
        Total         :      27
            Global    :       7
            Local     :      20
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed_soa *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed_soa *__restrict__, int *__restrict__)) [7/15=46.7%] d2q9-bgk.c(310,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(319,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(319,3)
   remark #15389: vectorization support: reference *(cells->v1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(329,7) ]
   remark #15389: vectorization support: reference *(cells->v1+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(329,7) ]
   remark #15389: vectorization support: reference *(cells->v5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(330,7) ]
   remark #15389: vectorization support: reference *(cells->v5+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(330,7) ]
   remark #15389: vectorization support: reference *(cells->v8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(331,7) ]
   remark #15389: vectorization support: reference *(cells->v8+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(331,7) ]
   remark #15389: vectorization support: reference *(cells->v3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(333,7) ]
   remark #15389: vectorization support: reference *(cells->v3+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(333,7) ]
   remark #15389: vectorization support: reference *(cells->v6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(334,7) ]
   remark #15389: vectorization support: reference *(cells->v6+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(334,7) ]
   remark #15389: vectorization support: reference *(cells->v7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(335,7) ]
   remark #15389: vectorization support: reference *(cells->v7+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk.c(335,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.298
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 31.870 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(319,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(310,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:310

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     127
            Global    :      47
            Local     :      80
        Regenerable   :      10
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: propagate(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (propagate(const t_param, t_speed_soa *__restrict__, t_speed_soa *__restrict__, int, int)) [8/15=53.3%] d2q9-bgk.c(343,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(343,1):remark #34051: REGISTER ALLOCATION : [propagate] d2q9-bgk.c:343

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      80
            Global    :       0
            Local     :      80
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed_soa *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed_soa *, int *)) [9/15=60.0%] d2q9-bgk.c(482,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(490,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(492,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(492,5)
      remark #15389: vectorization support: reference tmp_cells->v0[idx] has unaligned access   [ d2q9-bgk.c(499,31) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(500,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(501,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(502,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(503,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(504,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(505,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(506,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(507,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(510,22) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(511,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(512,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(513,26) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(514,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(515,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(518,22) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(519,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(520,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(521,26) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(522,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(523,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.290 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(492,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(482,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:482

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     224
            Global    :      34
            Local     :     190
        Regenerable   :       8
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       5 [1.85e+01 ~ 0.5%]
            Writes    :       5 [1.53e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed_soa **, t_speed_soa **, t_speed_soa **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed_soa **, t_speed_soa **, t_speed_soa **, int **, float **)) [10/15=66.7%] d2q9-bgk.c(696,1)
  -> INLINE: (701,3) free_t_speed_soa(t_speed_soa *) (isz = 27) (sz = 32)
    -> EXTERN: (124,3) _mm_free(void *)
    -> EXTERN: (125,3) _mm_free(void *)
    -> EXTERN: (126,3) _mm_free(void *)
    -> EXTERN: (127,3) _mm_free(void *)
    -> EXTERN: (128,3) _mm_free(void *)
    -> EXTERN: (129,3) _mm_free(void *)
    -> EXTERN: (130,3) _mm_free(void *)
    -> EXTERN: (131,3) _mm_free(void *)
    -> EXTERN: (132,3) _mm_free(void *)
    -> EXTERN: (133,3) _mm_free(void *)
  -> INLINE: (704,3) free_t_speed_soa(t_speed_soa *) (isz = 27) (sz = 32)
    -> EXTERN: (124,3) _mm_free(void *)
    -> EXTERN: (125,3) _mm_free(void *)
    -> EXTERN: (126,3) _mm_free(void *)
    -> EXTERN: (127,3) _mm_free(void *)
    -> EXTERN: (128,3) _mm_free(void *)
    -> EXTERN: (129,3) _mm_free(void *)
    -> EXTERN: (130,3) _mm_free(void *)
    -> EXTERN: (131,3) _mm_free(void *)
    -> EXTERN: (132,3) _mm_free(void *)
    -> EXTERN: (133,3) _mm_free(void *)
  -> INLINE: (707,3) free_t_speed_soa(t_speed_soa *) (isz = 27) (sz = 32)
    -> EXTERN: (124,3) _mm_free(void *)
    -> EXTERN: (125,3) _mm_free(void *)
    -> EXTERN: (126,3) _mm_free(void *)
    -> EXTERN: (127,3) _mm_free(void *)
    -> EXTERN: (128,3) _mm_free(void *)
    -> EXTERN: (129,3) _mm_free(void *)
    -> EXTERN: (130,3) _mm_free(void *)
    -> EXTERN: (131,3) _mm_free(void *)
    -> EXTERN: (132,3) _mm_free(void *)
    -> EXTERN: (133,3) _mm_free(void *)
  -> EXTERN: (710,3) _mm_free(void *)
  -> EXTERN: (713,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(696,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:696

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      82
            Global    :      14
            Local     :      68
        Regenerable   :       1
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed_soa *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed_soa *, int *)) [11/15=73.3%] d2q9-bgk.c(721,1)
  -> INLINE: (724,10) av_velocity(const t_param, t_speed_soa *, int *) (isz = 155) (sz = 166)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(490,3) inlined into d2q9-bgk.c(724,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(492,5) inlined into d2q9-bgk.c(724,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(492,5) inlined into d2q9-bgk.c(724,10)
      remark #15389: vectorization support: reference cells->v0[idx] has unaligned access   [ d2q9-bgk.c(499,31) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(500,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(501,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(502,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(503,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(504,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(505,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(506,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(507,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(510,22) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(511,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(512,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(513,26) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(514,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(515,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(518,22) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(519,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(520,25) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(521,26) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(522,29) ]
      remark #15389: vectorization support: reference *(local_density+idx*4) has unaligned access   [ d2q9-bgk.c(523,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.290 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(492,5) inlined into d2q9-bgk.c(724,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(721,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:721

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     230
            Global    :      35
            Local     :     195
        Regenerable   :       9
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       5 [1.85e+01 ~ 0.5%]
            Writes    :       5 [1.53e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed_soa *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed_soa *)) [12/15=80.0%] d2q9-bgk.c(729,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(732,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(734,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(734,5)
      remark #15389: vectorization support: reference cells->v0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(736,16) ]
      remark #15389: vectorization support: reference cells->v1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(736,47) ]
      remark #15389: vectorization support: reference cells->v2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(737,16) ]
      remark #15389: vectorization support: reference cells->v3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(737,47) ]
      remark #15389: vectorization support: reference cells->v4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(738,16) ]
      remark #15389: vectorization support: reference cells->v5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(738,47) ]
      remark #15389: vectorization support: reference cells->v6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(739,16) ]
      remark #15389: vectorization support: reference cells->v7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(739,47) ]
      remark #15389: vectorization support: reference cells->v8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(740,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(734,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->v0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(736,16) ]
      remark #15389: vectorization support: reference cells->v1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(736,47) ]
      remark #15389: vectorization support: reference cells->v2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(737,16) ]
      remark #15389: vectorization support: reference cells->v3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(737,47) ]
      remark #15389: vectorization support: reference cells->v4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(738,16) ]
      remark #15389: vectorization support: reference cells->v5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(738,47) ]
      remark #15389: vectorization support: reference cells->v6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(739,16) ]
      remark #15389: vectorization support: reference cells->v7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(739,47) ]
      remark #15389: vectorization support: reference cells->v8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(740,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(734,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(729,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:729

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     175
            Global    :      64
            Local     :     111
        Regenerable   :       7
        Spilled       :      38
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     304 bytes*
            Reads     :      66 [2.76e+02 ~ 9.1%]
            Writes    :      67 [2.34e+02 ~ 7.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [13/15=86.7%] d2q9-bgk.c(831,1)
  -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (834,3) fflush(FILE *)
  -> EXTERN: (835,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(831,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:831

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [14/15=93.3%] d2q9-bgk.c(839,1)
  -> EXTERN: (840,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (841,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(839,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:839

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed_soa **, t_speed_soa **, t_speed_soa **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed_soa **, t_speed_soa **, t_speed_soa **, int **, float **)) [15/15=100.0%] d2q9-bgk.c(539,1)
  -> EXTERN: (547,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (551,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (552,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (556,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (558,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (560,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (562,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (564,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (566,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (568,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (570,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (572,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (574,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (576,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (578,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (580,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (582,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (585,3) fclose(FILE *)
  -> INLINE: (610,24) alloc_t_speed_soa(const int) (isz = 139) (sz = 146)
    -> EXTERN: (101,40) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (102,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (103,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (104,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (105,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (106,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (107,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (108,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (109,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (110,25) _mm_malloc(unsigned long long, unsigned long long)
    -> INLINE: (115,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (834,3) fflush(FILE *)
      -> EXTERN: (835,3) exit(int)
  -> INLINE: (611,33) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> INLINE: (614,22) alloc_t_speed_soa(const int) (isz = 139) (sz = 146)
    -> EXTERN: (101,40) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (102,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (103,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (104,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (105,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (106,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (107,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (108,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (109,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (110,25) _mm_malloc(unsigned long long, unsigned long long)
    -> INLINE: (115,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (834,3) fflush(FILE *)
      -> EXTERN: (835,3) exit(int)
  -> INLINE: (615,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> INLINE: (618,22) alloc_t_speed_soa(const int) (isz = 139) (sz = 146)
    -> EXTERN: (101,40) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (102,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (103,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (104,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (105,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (106,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (107,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (108,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (109,25) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (110,25) _mm_malloc(unsigned long long, unsigned long long)
    -> INLINE: (115,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (834,3) fflush(FILE *)
      -> EXTERN: (835,3) exit(int)
  -> INLINE: (619,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (622,29) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (623,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (658,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (662,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (663,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (667,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (667,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (670,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> INLINE: (672,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> INLINE: (674,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> INLINE: (676,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (832,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (833,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (834,3) fflush(FILE *)
    -> EXTERN: (835,3) exit(int)
  -> EXTERN: (683,3) fclose(FILE *)
  -> EXTERN: (689,26) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(630,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *start_cells_ptr->v0[idx] (635:9) and *start_cells_ptr->v8[idx] (643:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between *start_cells_ptr->v8[idx] (643:9) and *start_cells_ptr->v0[idx] (635:9)

   LOOP BEGIN at d2q9-bgk.c(632,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between *start_cells_ptr->v0[idx] (635:9) and *start_cells_ptr->v8[idx] (643:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between *start_cells_ptr->v8[idx] (643:9) and *start_cells_ptr->v0[idx] (635:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(649,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(651,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(651,5)
         remark #15389: vectorization support: reference obstacles_ptr has unaligned access   [ d2q9-bgk.c(653,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(651,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(667,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(653,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
d2q9-bgk.c(653,9):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk.c(539,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:539

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     612
            Global    :     142
            Local     :     470
        Regenerable   :     286
        Spilled       :      13
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.63e+01 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      15 [3.56e+01 ~ 2.4%]
            Writes    :       9 [5.60e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

